{"meta":{"title":"北屿","subtitle":"Blog","description":"北屿博客、个人技术博客","author":"John Doe","url":"https://evevn.com","root":"/"},"pages":[{"title":"标签","date":"2023-10-19T07:07:46.000Z","updated":"2023-10-19T07:09:38.237Z","comments":true,"path":"tags/index.html","permalink":"https://evevn.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-10-19T07:06:19.462Z","updated":"2023-10-19T07:06:19.462Z","comments":true,"path":"categories/index.html","permalink":"https://evevn.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Ubuntu下inotify+rsync实时同步","slug":"inotify+rsync实时同步","date":"2023-10-19T07:25:53.079Z","updated":"2023-10-19T07:41:04.765Z","comments":true,"path":"2023/inotify+rsync实时同步/","link":"","permalink":"https://evevn.com/2023/inotify+rsync%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/","excerpt":"","text":"一、主服务器（发送文件的一方）1.需要安装inotify-tools辅助工具和rsyncrsync监听端口：873 12apt-get install inotify-toolsapt-get install rsync 创建需要同步的源路径： 12mkdir /home/backup/chmod 777 /home/backup/ 创建rsync验证的密码文件： 12echo password &gt; /home/rsync/rsync.passchmod 600 /home/rsync/rsync.pass 配置主机监控参数： 12345678910111213141516171819202122#这是默认数值max_queue_events（监控事件队列，默认值为16384）max_user_instances（最多监控实例数，默认值为128）max_user_watches（每个实例最多监控文件数，默认值为8192）当要监控的目录、文件数量较多或者变化较频繁时，建议加大这三个参数的值。cat /proc/sys/fs/inotify/max_queued_eventscat /proc/sys/fs/inotify/max_user_instancescat /proc/sys/fs/inotify/max_user_watches#进行修改vim /etc/sysctl.conffs.inotify.max_queued_events = 17000fs.inotify.max_user_instances = 1024fs.inotify.max_user_watches = 1048576#列出目前参数sysctl -pfs.inotify.max_queued_events = 17000fs.inotify.max_user_instances = 1024fs.inotify.max_user_watches = 1048576 2.主机不需要启动rsync，编写定时脚本监控：123456789101112131415161718192021222324252627282930313233343536373839404142434445vi /opt/inotify_rsync.sh#!/bin/bashsrc=/home/backup/ # 需要同步的源路径des=slave-conf # 目标服务器上 rsync --daemon 发布的名称，rsync --daemon这里就不做介绍了，网上搜一下，比较简单。rsync_passwd_file=/home/rsync/rsync.pass # rsync验证的密码文件ip1=IP # 目标服务器1ip2=IP # 目标服务器2user=backup # rsync --daemon定义的验证用户名cd $&#123;src&#125; # 此方法中，由于rsync同步的特性，这里必须要先cd到源目录，inotify再监听 ./ 才能rsync同步后目录结构一致，有兴趣的同学可以进行各种尝试观看其效果inotifywait -mrq --format &#x27;%Xe %w%f&#x27; -e modify,create,delete,attrib,close_write,move ./ | while read file # 把监控到有发生更改的&quot;文件路径列表&quot;循环do INO_EVENT=$(echo $file | awk &#x27;&#123;print $1&#125;&#x27;) # 把inotify输出切割 把事件类型部分赋值给INO_EVENT INO_FILE=$(echo $file | awk &#x27;&#123;print $2&#125;&#x27;) # 把inotify输出切割 把文件路径部分赋值给INO_FILE echo &quot;-------------------------------$(date)------------------------------------&quot; echo $file #增加、修改、写入完成、移动进事件 #增、改放在同一个判断，因为他们都肯定是针对文件的操作，即使是新建目录，要同步的也只是一个空目录，不会影响速度。 if [[ $INO_EVENT =~ &#x27;CREATE&#x27; ]] || [[ $INO_EVENT =~ &#x27;MODIFY&#x27; ]] || [[ $INO_EVENT =~ &#x27;CLOSE_WRITE&#x27; ]] || [[ $INO_EVENT =~ &#x27;MOVED_TO&#x27; ]] # 判断事件类型 then echo &#x27;CREATE or MODIFY or CLOSE_WRITE or MOVED_TO&#x27; rsync -avzcR --password-file=$&#123;rsync_passwd_file&#125; $(dirname $&#123;INO_FILE&#125;) $&#123;user&#125;@$&#123;ip1&#125;::$&#123;des&#125; &amp;&amp; # INO_FILE变量代表路径哦 -c校验文件内容 rsync -avzcR --password-file=$&#123;rsync_passwd_file&#125; $(dirname $&#123;INO_FILE&#125;) $&#123;user&#125;@$&#123;ip2&#125;::$&#123;des&#125; #仔细看 上面的rsync同步命令 源是用了$(dirname $&#123;INO_FILE&#125;)变量 即每次只针对性的同步发生改变的文件的目录(只同步目标文件的方法在生产环境的某些极端环境下会漏文件 现在可以在不漏文件下也有不错的速度 做到平衡) 然后用-R参数把源的目录结构递归到目标后面 保证目录结构一致性 fi #删除、移动出事件 if [[ $INO_EVENT =~ &#x27;DELETE&#x27; ]] || [[ $INO_EVENT =~ &#x27;MOVED_FROM&#x27; ]] then echo &#x27;DELETE or MOVED_FROM&#x27; rsync -avzR --delete --password-file=$&#123;rsync_passwd_file&#125; $(dirname $&#123;INO_FILE&#125;) $&#123;user&#125;@$&#123;ip1&#125;::$&#123;des&#125; &amp;&amp; rsync -avzR --delete --password-file=$&#123;rsync_passwd_file&#125; $(dirname $&#123;INO_FILE&#125;) $&#123;user&#125;@$&#123;ip2&#125;::$&#123;des&#125; #看rsync命令 如果直接同步已删除的路径$&#123;INO_FILE&#125;会报no such or directory错误 所以这里同步的源是被删文件或目录的上一级路径，并加上--delete来删除目标上有而源中没有的文件，这里不能做到指定文件删除，如果删除的路径越靠近根，则同步的目录月多，同步删除的操作就越花时间。这里有更好方法的同学，欢迎交流。 fi #修改属性事件 指 touch chgrp chmod chown等操作 if [[ $INO_EVENT =~ &#x27;ATTRIB&#x27; ]] then echo &#x27;ATTRIB&#x27; if [ ! -d &quot;$INO_FILE&quot; ] # 如果修改属性的是目录 则不同步，因为同步目录会发生递归扫描，等此目录下的文件发生同步时，rsync会顺带更新此目录。 then rsync -avzcR --password-file=$&#123;rsync_passwd_file&#125; $(dirname $&#123;INO_FILE&#125;) $&#123;user&#125;@$&#123;ip1&#125;::$&#123;des&#125; &amp;&amp; rsync -avzcR --password-file=$&#123;rsync_passwd_file&#125; $(dirname $&#123;INO_FILE&#125;) $&#123;user&#125;@$&#123;ip2&#125;::$&#123;des&#125; fi fidone 3.将监控脚本写入systemctl管理123456789101112131415161718vi /usr/lib/systemd/system/inotify_rsync.service[Unit]Description=inotify_rsyncAfter=network.target[Service]Type=simpleUser=rootExecStart=/opt/inotify_rsync.shWorkingDirectory=/optRestart=on-failure[Install]WantedBy=multi-user.target 写入后 1234systemctl daemon-reloadsystemctl enable inotify_rsync.servicesystemctl start inotify_rsync.servicesystemctl status inotify_rsync.service 2.从服务器（接收文件的一方）1.安装rsync1234567891011121314151617181920apt-get install rsync#建立rsync配置文件vi /etc/rsyncd.confuid = root gid = root use chroot = yes#禁锢在源目录address = IP#监听地址，监听本机地址port = 873 #监听端口 tcp/udp 873，可通过cat /etc/services | grep rsync查看log file = /var/log/rsyncd.log#日志文件位置pid file = /var/run/rsyncd.pid#存放进程 ID 的文件位置hosts allow = IP#允许同步的客户机网段[slave-conf] #共享模块名称path = /home/backup #源目录的实际路径（同步的目录）read only = no #是否为只读dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z #同步时不再压缩的文件类型auth users = backup #授权账户，多个账号以空格分隔secrets file = /home/rsync/user.pass #存放账户信息的数据文件 为备份账户创建数据文件 123echo backup:password &gt; /home/rsync/user.passchmod 600 /home/rsync/user.pass 保证所有用户对源目录&#x2F;home&#x2F;backup（需要备份的文件目录）都有读取权限 1chmod +r /home/backup 启动 rsync 服务 123systemctl enable rsync.servicesystemctl start rsync.servicesystemctl status rsync.service 2.启动脚本测试在 &#x2F;home&#x2F;backup创建文件检查是否同步到从服务器手动测试同步 &#x2F;从服务器用 1rsync -az --delete --password-file=/home/rsync/user.pass backup@IP::slave-conf /home/backup 3.每两小时做1次全量同步因为inotify只在启动时会监控目录，他没有启动期间的文件发生更改，他是不知道的，所以这里每2个小时做1次全量同步，防止各种意外遗漏，保证目录一致。 123crontab -e0 */2 * * * rsync -avz --password-file=/home/rsync/rsync.pass /home/backup backup@IP::slave-conf &amp;&amp; rsync -avz --password-file=/home/rsync/rsync.pass /home/backup backup@IP::slave-conf 总结1、rsync是数据同步，inotify是实时同步，不要搞混2、实验前该关的关，该配置的配置，防火墙、核心防护、网卡之类的；rsync的端口是8733、常见的rsync 错误报告看这里把 rsync 错误报告说清楚","categories":[{"name":"Linux","slug":"Linux","permalink":"https://evevn.com/categories/Linux/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://evevn.com/tags/Ubuntu/"},{"name":"inotify","slug":"inotify","permalink":"https://evevn.com/tags/inotify/"},{"name":"rsync","slug":"rsync","permalink":"https://evevn.com/tags/rsync/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://evevn.com/categories/Linux/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://evevn.com/tags/Ubuntu/"},{"name":"inotify","slug":"inotify","permalink":"https://evevn.com/tags/inotify/"},{"name":"rsync","slug":"rsync","permalink":"https://evevn.com/tags/rsync/"}]}